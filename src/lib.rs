use near_sdk::borsh::{self, BorshDeserialize, BorshSerialize};
use near_sdk::{
    json_types::U128, log, serde::Deserialize, serde::Serialize, serde_json, AccountId,
};
use serde_json::json;

pub const STANDARD: &str = "nep297";
pub const VERSION: &str = "1.0.0";
pub const EVENT_JSON_STR: &str = "EVENT_JSON:";

pub type EthAddress = [u8; 20];

#[derive(
    Default, BorshDeserialize, BorshSerialize, Debug, Clone, Serialize, Deserialize, PartialEq,
)]
pub struct Proof {
    pub log_index: u64,
    pub log_entry_data: Vec<u8>,
    pub receipt_index: u64,
    pub receipt_data: Vec<u8>,
    pub header_data: Vec<u8>,
    pub proof: Vec<Vec<u8>>,
}

#[derive(Serialize, Deserialize, BorshDeserialize, BorshSerialize, Debug, Clone, PartialEq)]
#[serde(crate = "near_sdk::serde")]
pub struct TransferDataEthereum {
    pub token_near: AccountId,
    pub token_eth: EthAddress,
    pub amount: U128,
}

#[derive(Serialize, Deserialize, BorshDeserialize, BorshSerialize, Debug, Clone, PartialEq)]
#[serde(crate = "near_sdk::serde")]
pub struct TransferDataNear {
    pub token: AccountId,
    pub amount: U128,
}

#[derive(Serialize, Deserialize, Debug, Clone, PartialEq)]
#[serde(crate = "near_sdk::serde")]
#[serde(tag = "event", content = "data")]
#[serde(rename_all = "snake_case")]
#[allow(clippy::enum_variant_names)]
#[allow(dead_code)]
pub enum Event {
    SpectreBridgeTransferEvent {
        nonce: U128,
        chain_id: u32,
        valid_till: u64,
        transfer: TransferDataEthereum,
        fee: TransferDataNear,
        recipient: EthAddress,
    },
    SpectreBridgeUnlockEvent {
        nonce: U128,
        account: AccountId,
    },
    SpectreBridgeDepositEvent {
        account: AccountId,
        token: AccountId,
        amount: U128,
    },
    SpectreBridgeEthProoverNotProofedEvent {
        nonce: U128,
        proof: Proof,
    },
}

#[allow(dead_code)]
pub fn get_eth_address(address: String) -> EthAddress {
    let data = hex::decode(address).expect("address should be a valid hex string.");
    assert_eq!(data.len(), 20, "address should be 20 bytes long");
    let mut result = [0u8; 20];
    result.copy_from_slice(&data);
    result
}

pub fn remove_prefix(event_str: &str) -> std::option::Option<serde_json::Value> {
    if let Some(value) = event_str.strip_prefix(EVENT_JSON_STR) {
        if let Ok(r) = serde_json::from_str::<serde_json::Value>(value) {
            return Some(r);
        }
    }
    None
}

impl Event {
    #[allow(dead_code)]
    pub fn emit(&self) {
        emit_event(&self);
    }
}

#[derive(Serialize, Deserialize, Debug)]
#[serde(crate = "near_sdk::serde")]
pub struct EventMessage {
    pub standard: String,
    pub version: String,
    pub event: serde_json::Value,
    pub data: serde_json::Value,
}

#[allow(dead_code)]
pub(crate) fn emit_event<T: ?Sized + Serialize>(data: &T) {
    let result = json!(data);
    let event_json = json!(EventMessage {
        standard: STANDARD.to_string(),
        version: VERSION.to_string(),
        event: result["event"].clone(),
        data: result["data"].clone()
    })
    .to_string();
    log!(format!("{}{}", EVENT_JSON_STR, event_json));
}

#[cfg(test)]
mod tests {
    use super::*;
    use assert_json_diff::assert_json_eq;
    use near_sdk::test_utils::test_env::alice;
    use near_sdk::{test_utils, AccountId};

    fn token() -> AccountId {
        AccountId::new_unchecked("token.near".to_string())
    }

    fn get_eth_address() -> EthAddress {
        let address: String = "71C7656EC7ab88b098defB751B7401B5f6d8976F".to_string();
        super::get_eth_address(address)
    }

    #[test]
    fn transfer_event_test() {
        let nonce = U128(238);
        let validator_id = alice();
        let token_address = get_eth_address();
        let amount: u128 = 100;
        Event::SpectreBridgeTransferEvent {
            nonce,
            chain_id: 5,
            valid_till: 0,
            transfer: TransferDataEthereum {
                token_near: validator_id.clone(),
                token_eth: token_address,
                amount: U128(amount),
            },
            fee: TransferDataNear {
                token: validator_id,
                amount: U128(amount),
            },
            recipient: token_address,
        }
        .emit();

        let log_data_str = &test_utils::get_logs()[0];
        let expected_result_str = r#"EVENT_JSON:{"standard":"nep297","version":"1.0.0","event":"spectre_bridge_transfer_event","data":{"nonce":"238","chain_id":5,"valid_till":0,"transfer":{"token_near":"alice.near","token_eth": [113,199,101,110,199,171,136,176,152,222,251,117,27,116,1,181,246,216,151,111],"amount":"100"},"fee":{"token":"alice.near","amount":"100"},"recipient":[113,199,101,110,199,171,136,176,152,222,251,117,27,116,1,181,246,216,151,111]}}"#;

        let json1 = remove_prefix(log_data_str).unwrap();
        let json2 = remove_prefix(expected_result_str).unwrap();

        assert_json_eq!(json1, json2)
    }

    #[test]
    fn unlock_event_test() {
        let nonce = U128(238);
        let validator_id = alice();
        Event::SpectreBridgeUnlockEvent {
            nonce,
            account: validator_id,
        }
        .emit();

        let log_data_str = &test_utils::get_logs()[0];
        let expected_result_str = r#"EVENT_JSON:{"standard":"nep297","version":"1.0.0","event":"spectre_bridge_unlock_event","data":{"nonce":"238","account":"alice.near"}}"#;

        let json1 = remove_prefix(log_data_str).unwrap();
        let json2 = remove_prefix(expected_result_str).unwrap();

        assert_json_eq!(json1, json2)
    }

    #[test]
    fn deposit_event_test() {
        let account = alice();
        let token = token();
        let amount = 300;
        Event::SpectreBridgeDepositEvent {
            account,
            token,
            amount: U128(amount),
        }
        .emit();
        let log_data_str = &test_utils::get_logs()[0];
        let expected_result_str = r#"EVENT_JSON:{"standard":"nep297","version":"1.0.0","event":"spectre_bridge_deposit_event","data":{"account":"alice.near","token":"token.near","amount":"300"}}"#;

        let json1 = remove_prefix(log_data_str).unwrap();
        let json2 = remove_prefix(expected_result_str).unwrap();

        assert_json_eq!(json1, json2)
    }

    #[test]
    fn eth_proover_not_proofed_event_test() {
        let nonce = 321;
        let proof = Proof {
            log_index: 2,
            log_entry_data: vec![
                248, 217, 148, 188, 104, 92, 0, 56, 132, 195, 148, 235, 181, 249, 35, 90, 29, 190,
                156, 189, 198, 201, 214, 225, 160, 75, 168, 15, 71, 73, 166, 186, 255, 95, 219, 86,
                204, 248, 139, 224, 35, 161, 66, 98, 44, 226, 232, 89, 24, 130, 92, 112, 90, 69,
                248, 126, 197, 184, 160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 39, 62, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 42,
                35, 224, 250, 58, 254, 119, 175, 245, 220, 108, 106, 0, 126, 58, 16, 193, 69, 6,
                51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 42, 35, 224, 250, 58, 254, 119, 175, 245,
                220, 108, 106, 0, 126, 58, 16, 193, 69, 6, 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                178, 215, 92, 90, 20, 42, 104, 189, 164, 56, 230, 163, 24, 199, 251, 178, 36, 47,
                150, 147, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 50,
            ],
            receipt_index: 20,
            receipt_data: vec![
                249, 3, 32, 1, 131, 82, 4, 136, 185, 1, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 128, 32, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                16, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 130, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 32, 0, 0, 0, 0, 0, 0, 2, 0, 16, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 249, 2, 21,
                248, 155, 148, 178, 215, 92, 90, 20, 42, 104, 189, 164, 56, 230, 163, 24, 199, 251,
                178, 36, 47, 150, 147, 248, 99, 160, 140, 91, 225, 229, 235, 236, 125, 91, 209, 79,
                113, 66, 125, 30, 132, 243, 221, 3, 20, 192, 247, 178, 41, 30, 91, 32, 10, 200,
                199, 195, 185, 37, 160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 42, 35, 224, 250, 58,
                254, 119, 175, 245, 220, 108, 106, 0, 126, 58, 16, 193, 69, 6, 51, 160, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 188, 104, 92, 0, 56, 132, 195, 148, 235, 181, 249, 35, 90,
                29, 190, 156, 189, 198, 201, 214, 160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 245, 217, 68, 248, 155, 148, 178, 215,
                92, 90, 20, 42, 104, 189, 164, 56, 230, 163, 24, 199, 251, 178, 36, 47, 150, 147,
                248, 99, 160, 221, 242, 82, 173, 27, 226, 200, 155, 105, 194, 176, 104, 252, 55,
                141, 170, 149, 43, 167, 241, 99, 196, 161, 22, 40, 245, 90, 77, 245, 35, 179, 239,
                160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 42, 35, 224, 250, 58, 254, 119, 175, 245,
                220, 108, 106, 0, 126, 58, 16, 193, 69, 6, 51, 160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 42, 35, 224, 250, 58, 254, 119, 175, 245, 220, 108, 106, 0, 126, 58, 16, 193,
                69, 6, 51, 160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 50, 248, 217, 148, 188, 104, 92, 0, 56, 132, 195, 148,
                235, 181, 249, 35, 90, 29, 190, 156, 189, 198, 201, 214, 225, 160, 75, 168, 15, 71,
                73, 166, 186, 255, 95, 219, 86, 204, 248, 139, 224, 35, 161, 66, 98, 44, 226, 232,
                89, 24, 130, 92, 112, 90, 69, 248, 126, 197, 184, 160, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 39, 62, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 42, 35, 224, 250, 58, 254, 119, 175, 245, 220, 108, 106, 0,
                126, 58, 16, 193, 69, 6, 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 42, 35, 224, 250,
                58, 254, 119, 175, 245, 220, 108, 106, 0, 126, 58, 16, 193, 69, 6, 51, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 178, 215, 92, 90, 20, 42, 104, 189, 164, 56, 230, 163, 24,
                199, 251, 178, 36, 47, 150, 147, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 50,
            ],
            header_data: vec![
                249, 2, 94, 160, 224, 248, 117, 117, 34, 141, 71, 228, 242, 146, 40, 132, 16, 29,
                2, 212, 170, 150, 193, 240, 69, 19, 196, 145, 12, 180, 2, 174, 205, 152, 176, 195,
                160, 29, 204, 77, 232, 222, 199, 93, 122, 171, 133, 181, 103, 182, 204, 212, 26,
                211, 18, 69, 27, 148, 138, 116, 19, 240, 161, 66, 253, 64, 212, 147, 71, 148, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 160, 69, 91, 221, 204, 115,
                152, 248, 77, 192, 64, 22, 180, 223, 91, 200, 149, 125, 248, 172, 30, 104, 233, 86,
                51, 238, 83, 136, 136, 210, 103, 227, 37, 160, 16, 38, 123, 179, 194, 106, 120,
                178, 138, 240, 212, 27, 221, 156, 237, 219, 119, 44, 127, 240, 81, 150, 34, 196,
                201, 118, 110, 124, 10, 156, 126, 212, 160, 145, 129, 184, 29, 14, 115, 233, 40,
                199, 108, 122, 40, 179, 9, 172, 188, 205, 215, 250, 238, 4, 187, 236, 46, 127, 200,
                105, 41, 65, 223, 80, 61, 185, 1, 0, 128, 36, 0, 0, 0, 32, 0, 4, 0, 0, 0, 34, 129,
                32, 2, 4, 176, 16, 0, 4, 2, 5, 132, 1, 1, 33, 129, 4, 2, 2, 8, 96, 0, 0, 32, 52, 0,
                134, 0, 0, 0, 0, 1, 0, 168, 0, 0, 16, 40, 0, 64, 128, 40, 0, 32, 4, 128, 146, 130,
                132, 128, 38, 102, 0, 0, 29, 0, 4, 4, 193, 128, 8, 128, 194, 0, 10, 16, 10, 200,
                32, 4, 16, 0, 0, 32, 14, 128, 0, 20, 16, 128, 0, 128, 1, 0, 0, 136, 35, 32, 0, 2,
                0, 132, 0, 130, 8, 32, 169, 0, 128, 10, 0, 32, 136, 0, 16, 64, 1, 0, 0, 1, 0, 0,
                81, 144, 74, 4, 69, 1, 129, 0, 5, 34, 0, 18, 34, 128, 66, 64, 0, 8, 16, 128, 2,
                130, 0, 4, 87, 1, 8, 0, 10, 0, 1, 4, 64, 11, 0, 8, 0, 158, 2, 1, 8, 141, 8, 0, 80,
                0, 1, 132, 32, 0, 0, 17, 192, 33, 33, 2, 132, 0, 4, 0, 0, 64, 34, 0, 0, 128, 0, 0,
                0, 0, 0, 64, 3, 0, 208, 64, 0, 6, 130, 6, 0, 64, 5, 0, 4, 1, 18, 0, 130, 132, 4,
                134, 24, 32, 32, 0, 1, 0, 23, 113, 74, 0, 16, 160, 0, 0, 160, 8, 24, 0, 65, 32,
                224, 0, 132, 16, 137, 3, 0, 0, 0, 0, 12, 16, 66, 4, 8, 2, 1, 0, 192, 16, 4, 1, 131,
                108, 74, 13, 132, 1, 200, 222, 190, 131, 186, 131, 220, 132, 98, 177, 165, 12, 184,
                97, 240, 159, 146, 142, 32, 64, 112, 114, 121, 108, 97, 98, 115, 32, 110, 111, 100,
                101, 45, 48, 32, 240, 159, 146, 142, 0, 0, 0, 0, 0, 0, 0, 88, 109, 66, 202, 249,
                30, 124, 53, 85, 202, 179, 146, 131, 205, 118, 74, 182, 47, 40, 151, 194, 166, 83,
                197, 170, 4, 0, 212, 153, 14, 1, 57, 64, 139, 231, 207, 107, 145, 113, 208, 44,
                241, 159, 22, 240, 146, 176, 150, 237, 79, 152, 13, 74, 220, 134, 27, 48, 186, 27,
                184, 40, 126, 214, 57, 1, 160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 136, 0, 0, 0, 0, 0, 0, 0, 0, 8,
            ],
            proof: vec![
                vec![
                    248, 113, 160, 53, 242, 206, 255, 32, 4, 244, 143, 126, 254, 147, 212, 115,
                    123, 68, 227, 142, 66, 83, 110, 4, 194, 221, 219, 218, 231, 204, 151, 227, 169,
                    100, 50, 160, 206, 205, 94, 140, 68, 249, 213, 137, 114, 48, 177, 244, 84, 188,
                    76, 21, 227, 66, 40, 111, 232, 87, 189, 151, 255, 164, 26, 135, 177, 157, 250,
                    231, 128, 128, 128, 128, 128, 128, 160, 229, 130, 21, 190, 132, 140, 18, 147,
                    221, 56, 18, 16, 53, 157, 132, 72, 85, 83, 0, 10, 130, 182, 116, 16, 64, 109,
                    24, 59, 66, 173, 187, 221, 128, 128, 128, 128, 128, 128, 128, 128,
                ],
                vec![
                    249, 1, 209, 160, 241, 152, 44, 179, 201, 142, 222, 90, 15, 147, 235, 110, 23,
                    115, 130, 123, 242, 165, 103, 159, 58, 107, 106, 244, 26, 221, 237, 119, 106,
                    11, 224, 116, 160, 244, 146, 183, 107, 157, 188, 44, 151, 7, 142, 66, 194, 156,
                    249, 108, 97, 55, 7, 250, 232, 117, 0, 215, 17, 42, 74, 247, 100, 0, 34, 215,
                    128, 160, 67, 31, 215, 210, 7, 196, 54, 69, 185, 55, 133, 11, 7, 112, 99, 105,
                    241, 210, 7, 227, 184, 10, 17, 35, 176, 178, 23, 172, 102, 39, 12, 208, 160,
                    195, 96, 145, 9, 147, 134, 48, 17, 71, 22, 55, 89, 38, 1, 204, 33, 56, 245, 58,
                    89, 236, 224, 52, 66, 11, 47, 222, 26, 11, 194, 57, 188, 160, 120, 34, 78, 200,
                    211, 60, 63, 178, 40, 125, 144, 25, 1, 159, 147, 178, 156, 7, 218, 201, 137,
                    129, 200, 150, 186, 84, 84, 59, 92, 161, 208, 110, 160, 131, 28, 224, 208, 76,
                    174, 121, 28, 56, 90, 20, 130, 80, 248, 105, 78, 9, 128, 135, 182, 32, 53, 33,
                    101, 17, 64, 226, 229, 244, 148, 64, 237, 160, 80, 219, 41, 190, 22, 18, 3, 21,
                    30, 178, 217, 159, 189, 14, 93, 198, 55, 169, 169, 249, 21, 232, 146, 113, 54,
                    135, 65, 227, 54, 0, 107, 86, 160, 76, 242, 125, 16, 240, 64, 173, 37, 139, 43,
                    173, 71, 248, 94, 154, 210, 37, 49, 35, 151, 228, 188, 173, 65, 179, 87, 47,
                    66, 118, 83, 157, 192, 160, 33, 224, 150, 90, 243, 199, 4, 185, 19, 238, 46, 1,
                    251, 182, 183, 8, 223, 214, 24, 20, 117, 249, 116, 129, 94, 191, 96, 172, 248,
                    144, 115, 117, 160, 211, 26, 97, 77, 176, 180, 149, 86, 112, 40, 78, 54, 211,
                    235, 145, 178, 73, 41, 68, 116, 33, 66, 44, 118, 49, 210, 50, 193, 243, 86,
                    163, 239, 160, 120, 175, 202, 183, 159, 96, 102, 98, 63, 65, 142, 86, 222, 103,
                    187, 150, 20, 31, 78, 16, 255, 52, 155, 141, 100, 195, 18, 66, 67, 241, 93, 30,
                    160, 237, 228, 167, 246, 38, 19, 173, 46, 44, 226, 64, 197, 76, 153, 69, 223,
                    218, 204, 142, 165, 152, 53, 17, 234, 214, 71, 124, 107, 81, 103, 251, 94, 160,
                    47, 208, 24, 191, 187, 122, 6, 205, 132, 59, 217, 81, 110, 197, 109, 187, 112,
                    75, 165, 178, 222, 56, 189, 163, 91, 196, 69, 222, 76, 219, 153, 108, 160, 24,
                    63, 179, 178, 242, 48, 20, 245, 153, 157, 32, 210, 103, 78, 106, 67, 7, 222,
                    180, 212, 220, 44, 175, 217, 21, 225, 68, 70, 204, 88, 248, 93, 128, 128, 128,
                ],
                vec![
                    249, 3, 39, 32, 185, 3, 35, 249, 3, 32, 1, 131, 82, 4, 136, 185, 1, 0, 0, 0, 0,
                    0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0,
                    0, 0, 0, 0, 0, 128, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8,
                    0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 1,
                    0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
                    0, 0, 130, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 2, 0, 32, 0, 0, 0, 0, 0, 0, 2, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 249, 2, 21, 248,
                    155, 148, 178, 215, 92, 90, 20, 42, 104, 189, 164, 56, 230, 163, 24, 199, 251,
                    178, 36, 47, 150, 147, 248, 99, 160, 140, 91, 225, 229, 235, 236, 125, 91, 209,
                    79, 113, 66, 125, 30, 132, 243, 221, 3, 20, 192, 247, 178, 41, 30, 91, 32, 10,
                    200, 199, 195, 185, 37, 160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 42, 35, 224,
                    250, 58, 254, 119, 175, 245, 220, 108, 106, 0, 126, 58, 16, 193, 69, 6, 51,
                    160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 188, 104, 92, 0, 56, 132, 195, 148,
                    235, 181, 249, 35, 90, 29, 190, 156, 189, 198, 201, 214, 160, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 245, 217,
                    68, 248, 155, 148, 178, 215, 92, 90, 20, 42, 104, 189, 164, 56, 230, 163, 24,
                    199, 251, 178, 36, 47, 150, 147, 248, 99, 160, 221, 242, 82, 173, 27, 226, 200,
                    155, 105, 194, 176, 104, 252, 55, 141, 170, 149, 43, 167, 241, 99, 196, 161,
                    22, 40, 245, 90, 77, 245, 35, 179, 239, 160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 42, 35, 224, 250, 58, 254, 119, 175, 245, 220, 108, 106, 0, 126, 58, 16,
                    193, 69, 6, 51, 160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 42, 35, 224, 250, 58,
                    254, 119, 175, 245, 220, 108, 106, 0, 126, 58, 16, 193, 69, 6, 51, 160, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 50, 248, 217, 148, 188, 104, 92, 0, 56, 132, 195, 148, 235, 181, 249,
                    35, 90, 29, 190, 156, 189, 198, 201, 214, 225, 160, 75, 168, 15, 71, 73, 166,
                    186, 255, 95, 219, 86, 204, 248, 139, 224, 35, 161, 66, 98, 44, 226, 232, 89,
                    24, 130, 92, 112, 90, 69, 248, 126, 197, 184, 160, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 39, 62, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 42, 35, 224, 250, 58, 254, 119, 175, 245, 220, 108,
                    106, 0, 126, 58, 16, 193, 69, 6, 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 42,
                    35, 224, 250, 58, 254, 119, 175, 245, 220, 108, 106, 0, 126, 58, 16, 193, 69,
                    6, 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 178, 215, 92, 90, 20, 42, 104, 189,
                    164, 56, 230, 163, 24, 199, 251, 178, 36, 47, 150, 147, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 50,
                ],
            ],
        };

        Event::SpectreBridgeEthProoverNotProofedEvent {
            nonce: U128(nonce),
            proof,
        }
        .emit();

        let log_data_str = &test_utils::get_logs()[0];
        let expected_result_str = r#"EVENT_JSON:{"standard":"nep297","version":"1.0.0","event":"spectre_bridge_eth_proover_not_proofed_event","data":{"nonce":"321","proof":{"log_index":2,
            "log_entry_data":[248,217,148,188,104,92,0,56,132,195,148,235,181,249,35,90,29,190,156,189,198,201,214,225,160,75,168,15,71,73,166,186,255,95,219,86,204,248,139,224,35,161,66,98,44,226,232,89,24,130,92,112,90,69,248,126,197,184,160,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,39,62,0,0,0,0,0,0,0,0,0,0,0,0,42,35,224,250,58,254,119,175,245,220,108,106,0,126,58,16,193,69,6,51,0,0,0,0,0,0,0,0,0,0,0,0,42,35,224,250,58,254,119,175,245,220,108,106,0,126,58,16,193,69,6,51,0,0,0,0,0,0,0,0,0,0,0,0,178,215,92,90,20,42,104,189,164,56,230,163,24,199,251,178,36,47,150,147,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,50],
            "receipt_index":20,
            "receipt_data":[249,3,32,1,131,82,4,136,185,1,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,128,32,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,1,0,0,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,130,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,32,0,0,0,0,0,0,2,0,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,249,2,21,248,155,148,178,215,92,90,20,42,104,189,164,56,230,163,24,199,251,178,36,47,150,147,248,99,160,140,91,225,229,235,236,125,91,209,79,113,66,125,30,132,243,221,3,20,192,247,178,41,30,91,32,10,200,199,195,185,37,160,0,0,0,0,0,0,0,0,0,0,0,0,42,35,224,250,58,254,119,175,245,220,108,106,0,126,58,16,193,69,6,51,160,0,0,0,0,0,0,0,0,0,0,0,0,188,104,92,0,56,132,195,148,235,181,249,35,90,29,190,156,189,198,201,214,160,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,245,217,68,248,155,148,178,215,92,90,20,42,104,189,164,56,230,163,24,199,251,178,36,47,150,147,248,99,160,221,242,82,173,27,226,200,155,105,194,176,104,252,55,141,170,149,43,167,241,99,196,161,22,40,245,90,77,245,35,179,239,160,0,0,0,0,0,0,0,0,0,0,0,0,42,35,224,250,58,254,119,175,245,220,108,106,0,126,58,16,193,69,6,51,160,0,0,0,0,0,0,0,0,0,0,0,0,42,35,224,250,58,254,119,175,245,220,108,106,0,126,58,16,193,69,6,51,160,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,50,248,217,148,188,104,92,0,56,132,195,148,235,181,249,35,90,29,190,156,189,198,201,214,225,160,75,168,15,71,73,166,186,255,95,219,86,204,248,139,224,35,161,66,98,44,226,232,89,24,130,92,112,90,69,248,126,197,184,160,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,39,62,0,0,0,0,0,0,0,0,0,0,0,0,42,35,224,250,58,254,119,175,245,220,108,106,0,126,58,16,193,69,6,51,0,0,0,0,0,0,0,0,0,0,0,0,42,35,224,250,58,254,119,175,245,220,108,106,0,126,58,16,193,69,6,51,0,0,0,0,0,0,0,0,0,0,0,0,178,215,92,90,20,42,104,189,164,56,230,163,24,199,251,178,36,47,150,147,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,50],
            "header_data":[249,2,94,160,224,248,117,117,34,141,71,228,242,146,40,132,16,29,2,212,170,150,193,240,69,19,196,145,12,180,2,174,205,152,176,195,160,29,204,77,232,222,199,93,122,171,133,181,103,182,204,212,26,211,18,69,27,148,138,116,19,240,161,66,253,64,212,147,71,148,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,160,69,91,221,204,115,152,248,77,192,64,22,180,223,91,200,149,125,248,172,30,104,233,86,51,238,83,136,136,210,103,227,37,160,16,38,123,179,194,106,120,178,138,240,212,27,221,156,237,219,119,44,127,240,81,150,34,196,201,118,110,124,10,156,126,212,160,145,129,184,29,14,115,233,40,199,108,122,40,179,9,172,188,205,215,250,238,4,187,236,46,127,200,105,41,65,223,80,61,185,1,0,128,36,0,0,0,32,0,4,0,0,0,34,129,32,2,4,176,16,0,4,2,5,132,1,1,33,129,4,2,2,8,96,0,0,32,52,0,134,0,0,0,0,1,0,168,0,0,16,40,0,64,128,40,0,32,4,128,146,130,132,128,38,102,0,0,29,0,4,4,193,128,8,128,194,0,10,16,10,200,32,4,16,0,0,32,14,128,0,20,16,128,0,128,1,0,0,136,35,32,0,2,0,132,0,130,8,32,169,0,128,10,0,32,136,0,16,64,1,0,0,1,0,0,81,144,74,4,69,1,129,0,5,34,0,18,34,128,66,64,0,8,16,128,2,130,0,4,87,1,8,0,10,0,1,4,64,11,0,8,0,158,2,1,8,141,8,0,80,0,1,132,32,0,0,17,192,33,33,2,132,0,4,0,0,64,34,0,0,128,0,0,0,0,0,64,3,0,208,64,0,6,130,6,0,64,5,0,4,1,18,0,130,132,4,134,24,32,32,0,1,0,23,113,74,0,16,160,0,0,160,8,24,0,65,32,224,0,132,16,137,3,0,0,0,0,12,16,66,4,8,2,1,0,192,16,4,1,131,108,74,13,132,1,200,222,190,131,186,131,220,132,98,177,165,12,184,97,240,159,146,142,32,64,112,114,121,108,97,98,115,32,110,111,100,101,45,48,32,240,159,146,142,0,0,0,0,0,0,0,88,109,66,202,249,30,124,53,85,202,179,146,131,205,118,74,182,47,40,151,194,166,83,197,170,4,0,212,153,14,1,57,64,139,231,207,107,145,113,208,44,241,159,22,240,146,176,150,237,79,152,13,74,220,134,27,48,186,27,184,40,126,214,57,1,160,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,136,0,0,0,0,0,0,0,0,8],
            "proof":[[248,113,160,53,242,206,255,32,4,244,143,126,254,147,212,115,123,68,227,142,66,83,110,4,194,221,219,218,231,204,151,227,169,100,50,160,206,205,94,140,68,249,213,137,114,48,177,244,84,188,76,21,227,66,40,111,232,87,189,151,255,164,26,135,177,157,250,231,128,128,128,128,128,128,160,229,130,21,190,132,140,18,147,221,56,18,16,53,157,132,72,85,83,0,10,130,182,116,16,64,109,24,59,66,173,187,221,128,128,128,128,128,128,128,128],
                       [249,1,209,160,241,152,44,179,201,142,222,90,15,147,235,110,23,115,130,123,242,165,103,159,58,107,106,244,26,221,237,119,106,11,224,116,160,244,146,183,107,157,188,44,151,7,142,66,194,156,249,108,97,55,7,250,232,117,0,215,17,42,74,247,100,0,34,215,128,160,67,31,215,210,7,196,54,69,185,55,133,11,7,112,99,105,241,210,7,227,184,10,17,35,176,178,23,172,102,39,12,208,160,195,96,145,9,147,134,48,17,71,22,55,89,38,1,204,33,56,245,58,89,236,224,52,66,11,47,222,26,11,194,57,188,160,120,34,78,200,211,60,63,178,40,125,144,25,1,159,147,178,156,7,218,201,137,129,200,150,186,84,84,59,92,161,208,110,160,131,28,224,208,76,174,121,28,56,90,20,130,80,248,105,78,9,128,135,182,32,53,33,101,17,64,226,229,244,148,64,237,160,80,219,41,190,22,18,3,21,30,178,217,159,189,14,93,198,55,169,169,249,21,232,146,113,54,135,65,227,54,0,107,86,160,76,242,125,16,240,64,173,37,139,43,173,71,248,94,154,210,37,49,35,151,228,188,173,65,179,87,47,66,118,83,157,192,160,33,224,150,90,243,199,4,185,19,238,46,1,251,182,183,8,223,214,24,20,117,249,116,129,94,191,96,172,248,144,115,117,160,211,26,97,77,176,180,149,86,112,40,78,54,211,235,145,178,73,41,68,116,33,66,44,118,49,210,50,193,243,86,163,239,160,120,175,202,183,159,96,102,98,63,65,142,86,222,103,187,150,20,31,78,16,255,52,155,141,100,195,18,66,67,241,93,30,160,237,228,167,246,38,19,173,46,44,226,64,197,76,153,69,223,218,204,142,165,152,53,17,234,214,71,124,107,81,103,251,94,160,47,208,24,191,187,122,6,205,132,59,217,81,110,197,109,187,112,75,165,178,222,56,189,163,91,196,69,222,76,219,153,108,160,24,63,179,178,242,48,20,245,153,157,32,210,103,78,106,67,7,222,180,212,220,44,175,217,21,225,68,70,204,88,248,93,128,128,128],
                       [249,3,39,32,185,3,35,249,3,32,1,131,82,4,136,185,1,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,128,32,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,1,0,0,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,130,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,32,0,0,0,0,0,0,2,0,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,249,2,21,248,155,148,178,215,92,90,20,42,104,189,164,56,230,163,24,199,251,178,36,47,150,147,248,99,160,140,91,225,229,235,236,125,91,209,79,113,66,125,30,132,243,221,3,20,192,247,178,41,30,91,32,10,200,199,195,185,37,160,0,0,0,0,0,0,0,0,0,0,0,0,42,35,224,250,58,254,119,175,245,220,108,106,0,126,58,16,193,69,6,51,160,0,0,0,0,0,0,0,0,0,0,0,0,188,104,92,0,56,132,195,148,235,181,249,35,90,29,190,156,189,198,201,214,160,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,245,217,68,248,155,148,178,215,92,90,20,42,104,189,164,56,230,163,24,199,251,178,36,47,150,147,248,99,160,221,242,82,173,27,226,200,155,105,194,176,104,252,55,141,170,149,43,167,241,99,196,161,22,40,245,90,77,245,35,179,239,160,0,0,0,0,0,0,0,0,0,0,0,0,42,35,224,250,58,254,119,175,245,220,108,106,0,126,58,16,193,69,6,51,160,0,0,0,0,0,0,0,0,0,0,0,0,42,35,224,250,58,254,119,175,245,220,108,106,0,126,58,16,193,69,6,51,160,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,50,248,217,148,188,104,92,0,56,132,195,148,235,181,249,35,90,29,190,156,189,198,201,214,225,160,75,168,15,71,73,166,186,255,95,219,86,204,248,139,224,35,161,66,98,44,226,232,89,24,130,92,112,90,69,248,126,197,184,160,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,39,62,0,0,0,0,0,0,0,0,0,0,0,0,42,35,224,250,58,254,119,175,245,220,108,106,0,126,58,16,193,69,6,51,0,0,0,0,0,0,0,0,0,0,0,0,42,35,224,250,58,254,119,175,245,220,108,106,0,126,58,16,193,69,6,51,0,0,0,0,0,0,0,0,0,0,0,0,178,215,92,90,20,42,104,189,164,56,230,163,24,199,251,178,36,47,150,147,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,50]]}
        }}"#;

        let json1 = remove_prefix(log_data_str).unwrap();
        let json2 = remove_prefix(expected_result_str).unwrap();

        assert_json_eq!(json1, json2)
    }
}
